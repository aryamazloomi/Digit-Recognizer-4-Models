{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:31:13.695734Z","iopub.execute_input":"2025-09-09T15:31:13.695951Z","iopub.status.idle":"2025-09-09T15:31:16.318102Z","shell.execute_reply.started":"2025-09-09T15:31:13.695924Z","shell.execute_reply":"2025-09-09T15:31:16.317477Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/digit-recognizer/sample_submission.csv\n/kaggle/input/digit-recognizer/train.csv\n/kaggle/input/digit-recognizer/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# 1. Data Preparation","metadata":{}},{"cell_type":"code","source":"# Read the data\ntrain_data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\ntest_data = pd.read_csv(\"/kaggle/input/digit-recognizer/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:33.752257Z","iopub.execute_input":"2025-09-09T15:32:33.752529Z","iopub.status.idle":"2025-09-09T15:32:38.030825Z","shell.execute_reply.started":"2025-09-09T15:32:33.752507Z","shell.execute_reply":"2025-09-09T15:32:38.030237Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"y_train = train_data['label'].values\nX_train = train_data.drop(columns=['label']).values/255\nX_test = test_data.values/255","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:39.427329Z","iopub.execute_input":"2025-09-09T15:32:39.428001Z","iopub.status.idle":"2025-09-09T15:32:39.708952Z","shell.execute_reply.started":"2025-09-09T15:32:39.427976Z","shell.execute_reply":"2025-09-09T15:32:39.708145Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"fig, axes = plt.subplots(2, 5, figsize=(12, 5))\naxes = axes.flatten()\n\nfor digit in range(10):\n    idx = np.where(y_train == digit)[0][0]\n    \n    axes[digit].imshow(X_train[idx].reshape(28,28), cmap='gray')\n    axes[digit].axis('off')\n    axes[digit].set_title(str(digit), color='black', fontsize=25)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:42.640653Z","iopub.execute_input":"2025-09-09T15:32:42.640897Z","iopub.status.idle":"2025-09-09T15:32:43.218869Z","shell.execute_reply.started":"2025-09-09T15:32:42.640879Z","shell.execute_reply":"2025-09-09T15:32:43.217952Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 10 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size=0.15, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:45.586814Z","iopub.execute_input":"2025-09-09T15:32:45.587567Z","iopub.status.idle":"2025-09-09T15:32:47.989211Z","shell.execute_reply.started":"2025-09-09T15:32:45.587538Z","shell.execute_reply":"2025-09-09T15:32:47.988354Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"print(X_tr.shape, X_val.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:50.028122Z","iopub.execute_input":"2025-09-09T15:32:50.028956Z","iopub.status.idle":"2025-09-09T15:32:50.032895Z","shell.execute_reply.started":"2025-09-09T15:32:50.028930Z","shell.execute_reply":"2025-09-09T15:32:50.032230Z"}},"outputs":[{"name":"stdout","text":"(35700, 784) (6300, 784)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# 2. Models","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import regularizers, layers, callbacks\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LeakyReLU\nfrom tensorflow.keras.activations import linear, relu, sigmoid, softmax","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:32:55.188203Z","iopub.execute_input":"2025-09-09T15:32:55.188932Z","iopub.status.idle":"2025-09-09T15:33:13.357663Z","shell.execute_reply.started":"2025-09-09T15:32:55.188909Z","shell.execute_reply":"2025-09-09T15:33:13.357072Z"}},"outputs":[{"name":"stderr","text":"2025-09-09 15:32:58.211353: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1757431978.557431      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1757431978.652664      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"## Model 1 - Simple MLP with 3 Layers ","metadata":{}},{"cell_type":"code","source":"def model1(input_dim=784, l2wd=0.0):\n    reg = regularizers.l2(l2wd) if l2wd>0 else None\n    model = tf.keras.Sequential([\n        layers.Input(shape=(input_dim,)),\n        layers.Dense(25, activation=\"relu\", kernel_regularizer=reg),\n        layers.Dense(15, activation=\"relu\", kernel_regularizer=reg),\n        layers.Dense(10, activation=\"softmax\")\n    ])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:33:37.100557Z","iopub.execute_input":"2025-09-09T15:33:37.101060Z","iopub.status.idle":"2025-09-09T15:33:37.105857Z","shell.execute_reply.started":"2025-09-09T15:33:37.101038Z","shell.execute_reply":"2025-09-09T15:33:37.105263Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"score = {\"m1\": 0, \"m2\": 0, \"m3\":0, \"m4\":0, \"m5\":0}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:33:39.529114Z","iopub.execute_input":"2025-09-09T15:33:39.529395Z","iopub.status.idle":"2025-09-09T15:33:39.533070Z","shell.execute_reply.started":"2025-09-09T15:33:39.529376Z","shell.execute_reply":"2025-09-09T15:33:39.532403Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"m1 = model1()\nES = callbacks.EarlyStopping(\n    monitor=\"val_accuracy\", patience=12, restore_best_weights=True\n)\nRLR = callbacks.ReduceLROnPlateau(\n    monitor=\"val_accuracy\", factor=0.5, patience=6, min_lr=1e-5, verbose=0\n)\nm1.compile(optimizer=tf.keras.optimizers.Adam(1e-3), loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nm1.fit(X_tr, y_tr, validation_data=(X_val, y_val),\n       epochs=50, batch_size=256, callbacks=[ES, RLR], verbose=0)\nscore[\"m1\"] = m1.evaluate(X_val, y_val, verbose=0)[1]\nprint(\"M1 val_acc:\", score[\"m1\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:34:42.454860Z","iopub.execute_input":"2025-09-09T15:34:42.455459Z","iopub.status.idle":"2025-09-09T15:35:07.698118Z","shell.execute_reply.started":"2025-09-09T15:34:42.455436Z","shell.execute_reply":"2025-09-09T15:35:07.697506Z"}},"outputs":[{"name":"stdout","text":"M1 val_acc: 0.9544444680213928\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"def write_submission(fname, preds_argmax):\n    sub = pd.DataFrame({\"ImageId\": np.arange(1, len(preds_argmax)+1), \"Label\": preds_argmax})\n    # NOTE: Digit Recognizer expects columns exactly: ImageId, Label\n    sub.to_csv(fname, index=False)\n    print(\"Saved:\", fname, sub.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:35:48.805453Z","iopub.execute_input":"2025-09-09T15:35:48.805700Z","iopub.status.idle":"2025-09-09T15:35:48.810094Z","shell.execute_reply.started":"2025-09-09T15:35:48.805684Z","shell.execute_reply":"2025-09-09T15:35:48.809529Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"m1_test_pred = m1.predict(X_test, verbose=0).argmax(axis=1)\nwrite_submission(\"submission_M1_simple_mlp.csv\", m1_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:36:09.780731Z","iopub.execute_input":"2025-09-09T15:36:09.780990Z","iopub.status.idle":"2025-09-09T15:36:11.879462Z","shell.execute_reply.started":"2025-09-09T15:36:09.780973Z","shell.execute_reply":"2025-09-09T15:36:11.878682Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_M1_simple_mlp.csv (28000, 2)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"markdown","source":"## Model 2","metadata":{}},{"cell_type":"markdown","source":"MLP with small grid on L2 and LR","metadata":{}},{"cell_type":"code","source":"def model2(lrs=(1e-2, 5e-3, 1e-3), l2s=(0.0, 1e-4, 1e-3)):\n    best = {\"acc\": -1, \"lr\": None, \"l2\": None, \"model\": None}\n    for lr in lrs:\n        for l2 in l2s:\n            model = model1(l2wd=l2)\n            model.compile(optimizer=tf.keras.optimizers.Adam(lr),\n                          loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n            history = model.fit(\n                X_tr, y_tr_oh, validation_data=(X_val, y_val_oh),\n                epochs=50, batch_size=256, callbacks=[ES, RLR], verbose=0\n            )\n            val_acc = max(history.history[\"val_accuracy\"])\n            print(f\"[M2] lr={lr:.0e} l2={l2:.0e} -> best_val_acc={val_acc:.4f}\")\n            if val_acc > best[\"acc\"]:\n                best = {\"acc\": val_acc, \"lr\": lr, \"l2\": l2, \"model\": model}\n    return best","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:36:22.527775Z","iopub.execute_input":"2025-09-09T15:36:22.528020Z","iopub.status.idle":"2025-09-09T15:36:22.533584Z","shell.execute_reply.started":"2025-09-09T15:36:22.528005Z","shell.execute_reply":"2025-09-09T15:36:22.532928Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"\n# One-hot targets for Keras softmax\nnum_classes = 10\ny_tr_oh  = tf.keras.utils.to_categorical(y_tr, num_classes)\ny_val_oh = tf.keras.utils.to_categorical(y_val, num_classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:36:25.701107Z","iopub.execute_input":"2025-09-09T15:36:25.701846Z","iopub.status.idle":"2025-09-09T15:36:25.706182Z","shell.execute_reply.started":"2025-09-09T15:36:25.701822Z","shell.execute_reply":"2025-09-09T15:36:25.705550Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"m2 = model2()\nprint(\"M2 best:\", m2[\"lr\"], m2[\"l2\"], \"val_acc:\", m2[\"acc\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:36:28.665311Z","iopub.execute_input":"2025-09-09T15:36:28.665933Z","iopub.status.idle":"2025-09-09T15:39:48.620040Z","shell.execute_reply.started":"2025-09-09T15:36:28.665910Z","shell.execute_reply":"2025-09-09T15:39:48.619428Z"}},"outputs":[{"name":"stdout","text":"[M2] lr=1e-02 l2=0e+00 -> best_val_acc=0.9594\n[M2] lr=1e-02 l2=1e-04 -> best_val_acc=0.9584\n[M2] lr=1e-02 l2=1e-03 -> best_val_acc=0.9616\n[M2] lr=5e-03 l2=0e+00 -> best_val_acc=0.9533\n[M2] lr=5e-03 l2=1e-04 -> best_val_acc=0.9530\n[M2] lr=5e-03 l2=1e-03 -> best_val_acc=0.9648\n[M2] lr=1e-03 l2=0e+00 -> best_val_acc=0.9522\n[M2] lr=1e-03 l2=1e-04 -> best_val_acc=0.9543\n[M2] lr=1e-03 l2=1e-03 -> best_val_acc=0.9614\nM2 best: 0.005 0.001 val_acc: 0.9647619128227234\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"score[\"m2\"] = m2[\"acc\"]\nprint(score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:40:28.712284Z","iopub.execute_input":"2025-09-09T15:40:28.712579Z","iopub.status.idle":"2025-09-09T15:40:28.716701Z","shell.execute_reply.started":"2025-09-09T15:40:28.712560Z","shell.execute_reply":"2025-09-09T15:40:28.715945Z"}},"outputs":[{"name":"stdout","text":"{'m1': 0.9544444680213928, 'm2': 0.9647619128227234, 'm3': 0, 'm4': 0, 'm5': 0}\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"m2_test_pred = m2[\"model\"].predict(X_test, verbose=0).argmax(axis=1)\nwrite_submission(\"submission_M2_mlp_grid.csv\", m2_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:40:31.067358Z","iopub.execute_input":"2025-09-09T15:40:31.067940Z","iopub.status.idle":"2025-09-09T15:40:32.942979Z","shell.execute_reply.started":"2025-09-09T15:40:31.067920Z","shell.execute_reply":"2025-09-09T15:40:32.942044Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_M2_mlp_grid.csv (28000, 2)\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"## Model 3 - Basic CNN with Conv2D","metadata":{}},{"cell_type":"markdown","source":"Model 3 - Baseline CNN","metadata":{}},{"cell_type":"code","source":"def build_cnn_baseline():\n    model = tf.keras.Sequential([\n        layers.Input(shape=(28,28,1)),\n        layers.Conv2D(32, 3, activation=\"relu\"),\n        layers.Conv2D(32, 3, activation=\"relu\"),\n        layers.MaxPooling2D(),\n        layers.Dropout(0.25),\n\n        layers.Conv2D(64, 3, activation=\"relu\"),\n        layers.Conv2D(64, 3, activation=\"relu\"),\n        layers.MaxPooling2D(),\n        layers.Dropout(0.25),\n\n        layers.Flatten(),\n        layers.Dense(128, activation=\"relu\"),\n        layers.Dropout(0.3),\n        layers.Dense(10, activation=\"softmax\")\n    ])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:40:34.933471Z","iopub.execute_input":"2025-09-09T15:40:34.933777Z","iopub.status.idle":"2025-09-09T15:40:34.938720Z","shell.execute_reply.started":"2025-09-09T15:40:34.933756Z","shell.execute_reply":"2025-09-09T15:40:34.938066Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"X_img = X_train.reshape(-1, 28, 28, 1)\nX_test_img = X_test.reshape(-1, 28, 28, 1)\n\nX_tr_img, X_val_img, y_tr, y_val = train_test_split(\n    X_img, y_train, test_size=0.15, random_state=42, stratify=y_train\n)\n\n# One-hot targets for Keras softmax\nnum_classes = 10\ny_tr_oh  = tf.keras.utils.to_categorical(y_tr, num_classes)\ny_val_oh = tf.keras.utils.to_categorical(y_val, num_classes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:40:37.030379Z","iopub.execute_input":"2025-09-09T15:40:37.031012Z","iopub.status.idle":"2025-09-09T15:40:37.419740Z","shell.execute_reply.started":"2025-09-09T15:40:37.030992Z","shell.execute_reply":"2025-09-09T15:40:37.419146Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"m3 = build_cnn_baseline()\nm3.compile(optimizer=tf.keras.optimizers.Adam(1e-3),\n           loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nm3.fit(X_tr_img, y_tr_oh, validation_data=(X_val_img, y_val_oh),\n       epochs=40, batch_size=256, callbacks=[ES, RLR], verbose=0)\nprint(\"M3 val_acc:\", m3.evaluate(X_val_img, y_val_oh, verbose=0)[1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:40:39.658800Z","iopub.execute_input":"2025-09-09T15:40:39.659332Z","iopub.status.idle":"2025-09-09T15:41:50.848399Z","shell.execute_reply.started":"2025-09-09T15:40:39.659310Z","shell.execute_reply":"2025-09-09T15:41:50.847693Z"}},"outputs":[{"name":"stdout","text":"M3 val_acc: 0.9939682483673096\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"score['m3'] = m3.evaluate(X_val_img, y_val_oh, verbose=0)[1]\nprint(score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:42:01.133019Z","iopub.execute_input":"2025-09-09T15:42:01.133389Z","iopub.status.idle":"2025-09-09T15:42:01.666816Z","shell.execute_reply.started":"2025-09-09T15:42:01.133365Z","shell.execute_reply":"2025-09-09T15:42:01.666178Z"}},"outputs":[{"name":"stdout","text":"{'m1': 0.9544444680213928, 'm2': 0.9647619128227234, 'm3': 0.9939682483673096, 'm4': 0, 'm5': 0}\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"m3_test_pred = m3.predict(X_test_img, verbose=0).argmax(axis=1)\nwrite_submission(\"submission_M3_cnn_baseline.csv\", m3_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:42:05.060929Z","iopub.execute_input":"2025-09-09T15:42:05.061209Z","iopub.status.idle":"2025-09-09T15:42:07.379731Z","shell.execute_reply.started":"2025-09-09T15:42:05.061190Z","shell.execute_reply":"2025-09-09T15:42:07.379055Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_M3_cnn_baseline.csv (28000, 2)\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"## Model 4","metadata":{}},{"cell_type":"code","source":"def build_cnn_bn():\n    inputs = layers.Input(shape=(28,28,1))\n\n    # Light augmentation (helps LB)\n    aug = tf.keras.Sequential([\n        layers.RandomRotation(0.05),\n        layers.RandomTranslation(0.05, 0.05),\n        layers.RandomZoom(0.05)\n    ])\n\n    x = aug(inputs)\n\n    def block(filters):\n        b = tf.keras.Sequential([\n            layers.Conv2D(filters, 3, padding=\"same\", use_bias=False),\n            layers.BatchNormalization(),\n            layers.Activation(\"relu\"),\n            layers.Conv2D(filters, 3, padding=\"same\", use_bias=False),\n            layers.BatchNormalization(),\n            layers.Activation(\"relu\"),\n            layers.MaxPooling2D(),\n            layers.Dropout(0.25),\n        ])\n        return b\n\n    x = block(32)(x)\n    x = block(64)(x)\n    x = block(128)(x)\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dropout(0.3)(x)\n    outputs = layers.Dense(10, activation=\"softmax\")(x)\n\n    model = tf.keras.Model(inputs, outputs)\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:42:10.096861Z","iopub.execute_input":"2025-09-09T15:42:10.097532Z","iopub.status.idle":"2025-09-09T15:42:10.104088Z","shell.execute_reply.started":"2025-09-09T15:42:10.097503Z","shell.execute_reply":"2025-09-09T15:42:10.103153Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"try:\n    # AdamW available in newer TF\n    Optim = tf.keras.optimizers.experimental.AdamW\nexcept:\n    Optim = tf.keras.optimizers.Adam  # fallback\n\nm4 = build_cnn_bn()\nm4.compile(optimizer=Optim(learning_rate=1e-3, weight_decay=1e-4),\n           loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.05),\n           metrics=[\"accuracy\"])\nm4.fit(X_tr_img, y_tr_oh, validation_data=(X_val_img, y_val_oh),\n       epochs=60, batch_size=256, callbacks=[ES, RLR], verbose=0)\nscore['m4'] = m4.evaluate(X_val_img, y_val_oh, verbose=0)[1]\nprint(\"M4 val_acc:\", score['m4'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:42:13.945420Z","iopub.execute_input":"2025-09-09T15:42:13.946002Z","iopub.status.idle":"2025-09-09T15:46:16.173841Z","shell.execute_reply.started":"2025-09-09T15:42:13.945963Z","shell.execute_reply":"2025-09-09T15:46:16.173169Z"}},"outputs":[{"name":"stderr","text":"E0000 00:00:1757432540.297171      36 meta_optimizer.cc:966] layout failed: INVALID_ARGUMENT: Size of values 0 does not match size of permutation 4 @ fanin shape inStatefulPartitionedCall/functional_16_1/sequential_13_1/dropout_3_1/stateless_dropout/SelectV2-2-TransposeNHWCToNCHW-LayoutOptimizer\n","output_type":"stream"},{"name":"stdout","text":"M4 val_acc: 0.996666669845581\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"\nprint(score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:46:45.339901Z","iopub.execute_input":"2025-09-09T15:46:45.340476Z","iopub.status.idle":"2025-09-09T15:46:45.344086Z","shell.execute_reply.started":"2025-09-09T15:46:45.340451Z","shell.execute_reply":"2025-09-09T15:46:45.343467Z"}},"outputs":[{"name":"stdout","text":"{'m1': 0.9544444680213928, 'm2': 0.9647619128227234, 'm3': 0.9939682483673096, 'm4': 0.996666669845581, 'm5': 0}\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"m4_test_pred = m4.predict(X_test_img, verbose=0).argmax(axis=1)\nwrite_submission(\"submission_M4_cnn_bn_aug.csv\", m4_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:47:12.140102Z","iopub.execute_input":"2025-09-09T15:47:12.140777Z","iopub.status.idle":"2025-09-09T15:47:14.784349Z","shell.execute_reply.started":"2025-09-09T15:47:12.140754Z","shell.execute_reply":"2025-09-09T15:47:14.783651Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_M4_cnn_bn_aug.csv (28000, 2)\n","output_type":"stream"}],"execution_count":30},{"cell_type":"markdown","source":"## Model 5 - Compact CNN (Deep Blocks + GAP)","metadata":{}},{"cell_type":"code","source":"def conv_block(x, f, drop=0.25):\n    x = layers.Conv2D(f, 3, padding=\"same\", use_bias=False)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n    x = layers.Conv2D(f, 3, padding=\"same\", use_bias=False)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation(\"relu\")(x)\n    x = layers.MaxPooling2D()(x)\n    x = layers.Dropout(drop)(x)\n    return x\n\ndef build_cnn_leader():\n    inputs = layers.Input(shape=(28,28,1))\n    aug = tf.keras.Sequential([\n        layers.RandomRotation(0.06),\n        layers.RandomTranslation(0.06, 0.06)\n    ])\n    x = aug(inputs)\n    x = conv_block(x, 64, drop=0.3)\n    x = conv_block(x, 128, drop=0.35)\n    x = conv_block(x, 256, drop=0.4)\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(128, activation=\"relu\")(x)\n    x = layers.Dropout(0.4)(x)\n    outputs = layers.Dense(10, activation=\"softmax\")(x)\n    return tf.keras.Model(inputs, outputs)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:49:57.232532Z","iopub.execute_input":"2025-09-09T15:49:57.232778Z","iopub.status.idle":"2025-09-09T15:49:57.239379Z","shell.execute_reply.started":"2025-09-09T15:49:57.232760Z","shell.execute_reply":"2025-09-09T15:49:57.238544Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"m5 = build_cnn_leader()\nm5.compile(optimizer=tf.keras.optimizers.Adam(1e-3),\n           loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.05),\n           metrics=[\"accuracy\"])\nm5.fit(X_tr_img, y_tr_oh, validation_data=(X_val_img, y_val_oh),\n       epochs=80, batch_size=256, callbacks=[ES, RLR], verbose=0)\nscore['m5'] = m5.evaluate(X_val_img, y_val_oh, verbose=0)[1]\nprint(\"M5 val_acc:\", score['m5'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:50:09.713879Z","iopub.execute_input":"2025-09-09T15:50:09.714474Z","iopub.status.idle":"2025-09-09T15:55:03.970895Z","shell.execute_reply.started":"2025-09-09T15:50:09.714452Z","shell.execute_reply":"2025-09-09T15:55:03.970030Z"}},"outputs":[{"name":"stderr","text":"E0000 00:00:1757433016.316073      36 meta_optimizer.cc:966] layout failed: INVALID_ARGUMENT: Size of values 0 does not match size of permutation 4 @ fanin shape inStatefulPartitionedCall/functional_18_1/dropout_7_1/stateless_dropout/SelectV2-2-TransposeNHWCToNCHW-LayoutOptimizer\n","output_type":"stream"},{"name":"stdout","text":"M5 val_acc: 0.9963492155075073\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"print(score)\nprint(max(score.values()))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T16:00:30.260482Z","iopub.execute_input":"2025-09-09T16:00:30.260750Z","iopub.status.idle":"2025-09-09T16:00:30.265069Z","shell.execute_reply.started":"2025-09-09T16:00:30.260731Z","shell.execute_reply":"2025-09-09T16:00:30.264160Z"}},"outputs":[{"name":"stdout","text":"{'m1': 0.9544444680213928, 'm2': 0.9647619128227234, 'm3': 0.9939682483673096, 'm4': 0.996666669845581, 'm5': 0.9963492155075073}\n0.996666669845581\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"m5_test_pred = m5.predict(X_test_img, verbose=0).argmax(axis=1)\nwrite_submission(\"submission_M5_cnn_leader.csv\", m5_test_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:57:19.670951Z","iopub.execute_input":"2025-09-09T15:57:19.671259Z","iopub.status.idle":"2025-09-09T15:57:23.257152Z","shell.execute_reply.started":"2025-09-09T15:57:19.671205Z","shell.execute_reply":"2025-09-09T15:57:23.256531Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_M5_cnn_leader.csv (28000, 2)\n","output_type":"stream"}],"execution_count":37},{"cell_type":"markdown","source":"## Blending M3, M4, M5","metadata":{}},{"cell_type":"code","source":"blend_logits = (\n    tf.keras.utils.to_categorical(m3_test_pred, 10) +\n    tf.keras.utils.to_categorical(m4_test_pred, 10) +\n    tf.keras.utils.to_categorical(m5_test_pred, 10)\n)\nblend_pred = blend_logits.argmax(axis=1)\nwrite_submission(\"submission_BLEND_M3_M4_M5.csv\", blend_pred)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T15:58:29.599785Z","iopub.execute_input":"2025-09-09T15:58:29.600053Z","iopub.status.idle":"2025-09-09T15:58:29.661521Z","shell.execute_reply.started":"2025-09-09T15:58:29.600034Z","shell.execute_reply":"2025-09-09T15:58:29.660924Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_BLEND_M3_M4_M5.csv (28000, 2)\n","output_type":"stream"}],"execution_count":38},{"cell_type":"markdown","source":"# Scores:\n\nBlend: 99582\n\nM4: 99532\n\nM1: 95328","metadata":{}}]}